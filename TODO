
Todo:
  ☐ Add files to gitignore
  ☐ Add npx convex deploy --cmd 'npm run build' back to vercel
  ☐ Group limit for workloading 32
  ☐ Get rid of following logs/errors
    - [Fast Refresh]
    - [Vercel Web Analytics
- Auto set level of module based on module code
- Auto set marking hours based on teaching hours (double)
- Default module teaching hours to 42
- Add teaching end date in module itteration
- add teaching/session dates so can be exported to timetabling
- mark due date auto to 15 or 20 days after assessment submission date
- Delivery time, do dropdown for day + dropdown for AM/PM/All Day
- Adjust module iteration modal to be more UI friendly and allow editing assessments etc
- Add course to module itterations
- fix module itterations submission convex issue
- proper implementation of module data
- proper implementation of itteration data
- proper implementation of module allocation data
- Fix drag & drop module allocation convex error (Sem)
- Allow report a bug to show on top of page and not making ui dissappear
- 42 hours in module iteration, showing as 41 hours in allocation page

    ## v0.1.0 Testing Preparation Tasks

### Critical Issues (Week 1)
☐ **Environment Variables Setup**
  - Create `.env.local` with all required variables
  - Test Clerk authentication integration
  - Verify Convex connection
  - Test Knock notifications setup
  - Verify Sentry error reporting

☐ **User Roles & Permissions Implementation**
  - Implement role-based access control (Admin, Professional Lead, Lecturer, Academic Manager)
  - Add role validation to all Convex queries and mutations
  - Create role-based UI components and navigation
  - Test permission boundaries for each user role
  - Add role-based dashboard views and functionality
  - Implement role-based CSV import permissions

☐ **Backend Schema Fixes**
  - Complete `convex/modules.ts` implementation
  - Add proper error handling to all Convex queries
  - Test data persistence and real-time updates
  - Verify authentication middleware

☐ **Error Handling & Sentry**
  - Add Sentry error capture to critical components
  - Update global error boundary with Sentry
  - Add try-catch blocks to all async operations
  - Test error reporting in development

### UI/UX Issues (Week 2)
☐ **Navigation & Routing**
  - Test dashboard access from landing page
  - Verify tab navigation functionality
  - Test mobile responsiveness
  - Check protected route access
  - Implement role-based navigation menus

☐ **Component Functionality**
  - Test CSV import for all data types
  - Verify staff profile modal displays
  - Test team capacity calculations
  - Verify recent activity feed integration

☐ **Lecturer Availability Calendar Feature**
  - Add availability indicator for lecturers based on teaching day of week
  - Show lecturer availability/unavailability during module start/finish periods
  - Implement calendar-style view similar to room booking systems
  - Display lecturers as available when not teaching on specific weeks
  - Show lecturers as unavailable when they have teaching commitments
  - Add filtering by date range and lecturer availability status
  - Integrate with existing module allocation system

☐ **Form Validation**
  - Add input validation to all forms
  - Implement user-friendly error messages
  - Add success confirmation messages
  - Test form submission flows

### Performance & Accessibility (Week 3)
☐ **Performance Optimization**
  - Add loading states and skeleton loaders
  - Optimize bundle size
  - Test image optimization
  - Verify Convex query performance

☐ **Accessibility Compliance**
  - Add ARIA labels to all components
  - Test keyboard navigation
  - Verify screen reader compatibility
  - Check color contrast ratios

### Documentation & Testing (Week 4)
☐ **Documentation Updates**
  - Update README with setup instructions
  - Create environment setup guide
  - Document testing procedures
  - Add user testing checklist
  - Document user roles and permissions

☐ **Testing Infrastructure**
  - Verify dev tools functionality
  - Test sample data imports
  - Verify error logging works
  - Test user journey scenarios

### Security & Compliance
☐ **Security Testing**
  - Test role-based access control
  - Verify API endpoint protection
  - Test data validation
  - Check authentication flows

☐ **Compliance Verification**
  - Verify privacy policy content
  - Check terms of service
  - Test cookie consent
  - Verify GDPR compliance

### Knock Notifications Implementation
☐ **Comprehensive Activity Tracking**
  - Implement Knock notifications for all CRUD operations
  - Add notifications for lecturer profile updates
  - Add notifications for module assignments
  - Add notifications for workload allocation changes
  - Add notifications for CSV import/export activities
  - Add notifications for system configuration changes
  - Add notifications for user role changes
  - Add notifications for capacity alerts and warnings

☐ **Notification Channels & Preferences**
  - Set up different notification channels (in-app, email, push)
  - Implement user notification preferences
  - Add notification frequency controls
  - Create notification templates for each activity type
  - Add notification grouping and threading

☐ **Real-time Activity Feed**
  - Enhance recent activity feed with all system activities
  - Add activity filtering by type and user
  - Implement activity search and pagination
  - Add activity export functionality
  - Create activity analytics and reporting

### User Journey Testing
☐ **New User Flow**
  - Sign up → Dashboard → Import data → View allocations
☐ **Existing User Flow**
  - Sign in → Dashboard → View reports → Edit allocations
☐ **Admin Flow**
  - Manage users → System settings → Data management
☐ **Role-based User Flows**
  - Professional Lead: Manage lecturers and modules
  - Lecturer: View personal workload and preferences
  - Academic Manager: Review allocations and reports

### Data Management Testing
☐ **CSV Import/Export**
  - Test lecturers import
  - Test modules import
  - Test module iterations import
  - Verify data validation
☐ **Real-time Features**
  - Test Knock notifications
  - Verify Convex real-time updates
  - Test activity feed display

### Final Testing Checklist
☐ **Pre-deployment Testing**
  - Run full test suite
  - Test all user journeys
  - Verify error handling
  - Check performance metrics
  - Test accessibility features
  - Verify security measures
  - Test all notification scenarios
  - Verify role-based access control
  - Calendar function/view

### Completed Tasks:
✔ Jest/React Testing Library setup working correctly @done(25-07-28 21:19)
✔ **FEATURE COMPONENT TESTS COMPLETED** - Added comprehensive tests for DashboardCard and Notifications components with full coverage of props, styling, edge cases, and error handling @done(25-07-29 08:30)
✔ React Hook context issues resolved @done(25-07-28 21:19)
✔ Component rendering tests fixed @done(25-07-28 21:19)
✔ TypeScript linter errors resolved @done(25-07-28 22:15)
✔ **Jest/React Testing Library Setup** - All `toBeInTheDocument` errors resolved @done(25-07-28 21:19)
✔ **Fix React Hook Context Issues** - Resolved `useMutation` context errors @done(25-07-28 21:19)
✔ **Fix Component Rendering Tests** - Resolved TestHistoryViewer and other component test failures @done(25-07-28 21:19)
✔ Fixed Jest configuration by uncommenting `setupFilesAfterEnv` @done(25-07-28 21:22)
✔ Enhanced Jest setup with proper Next.js App Router mocks @done(25-07-28 21:22)
✔ All `@testing-library/jest-dom` matchers now working @done(25-07-28 21:22)
✔ Added proper Convex client mocking for hook tests @done(25-07-28 21:22)
✔ Fixed all TestHistoryViewer modal and rendering issues @done(25-07-28 21:22)
✔ Fix Jest configuration and setup issues @done(25-07-28 21:19)
✔ Fix React Hook Context Issues @done(25-07-28 21:19)
✔ Fix Component Rendering Tests @done(25-07-28 21:19)
✔ Fix TypeScript Linter Errors @done(25-07-28 22:15)
✔ Complete academic-workload.test.ts implementation @done(25-07-28 22:45)
✔ Implement missing academic workload functions @done(25-07-28 22:30)
✔ Implement API layer testing @done(25-07-28 23:15)
✔ **CRITICAL BUSINESS LOGIC TESTING** - Priority: HIGH @done(25-07-28 21:54)
✔ **UI COMPONENT TESTING PROGRESS** - Fixed table component tests and added comprehensive tests for Alert, Badge, and Skeleton components @done(25-07-28 23:45)
✔ **UI COMPONENT TESTING PROGRESS** - Added comprehensive tests for Avatar, Checkbox, Switch, Tabs, and Textarea components (some userEvent tests need timeout fixes) @done(25-07-29 00:15)
✔ **COMPREHENSIVE UI COMPONENT TESTS COMPLETED** - Added comprehensive tests for Progress, Tooltip, Collapsible, DashboardMetricCard, Sidebar, Sheet, Popover, ScrollArea, Label, Separator, and Sonner components following Jest best practices with AAA pattern @done(25-07-29 01:30)
✔ **TESTHISTORYVIEWER & SNAPSHOT TESTING COMPLETED** - Resolved all TestHistoryViewer test failures (all tests passing) and implemented comprehensive snapshot testing for UI consistency across Progress, Button, Card, Input, Dialog, and Alert components @done(25-07-29 02:15)
✔ Fix and complete UI component tests: @done(25-07-29 07:38)
✔ Resolve all TestHistoryViewer test failures @done(25-07-29 07:38)
✔ Add comprehensive tests for all shadcn/ui components @done(25-07-29 07:38)
✔ Test component accessibility and responsive behavior @done(25-07-29 07:38)
✔ Add snapshot testing for UI consistency @done(25-07-29 07:38)
✔ Add feature component tests: @done(25-07-29 08:14)
✔ DashboardCard component tests @done(25-07-29 08:14)
✔ Module management component tests (mock issues need resolution) @done(25-07-29 08:14)
✔ Lecturer management component tests (mock issues need resolution) @done(25-07-29 08:14)
✔ Notification component tests @done(25-07-29 08:14)
✔ **COMPONENT TESTING COMPLETION** - Priority: HIGH @done(25-07-29 08:29)
✔ Add form component tests: @done(25-07-29 08:29)
✔ CSV import modal tests @done(25-07-29 08:29)
✔ Staff edit modal tests @done(25-07-29 08:29)
✔ Settings modal tests @done(25-07-29 08:29)
✔ All form validation tests @done(25-07-29 08:29)