[
  {
    "id": "test-1753723604820-h8mgdsol1",
    "testType": "component",
    "coverage": true,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 70,
      "timeout": 5000,
      "maxWorkers": 2
    },
    "success": true,
    "summary": {
      "total": 88,
      "passed": 88,
      "failed": 0,
      "running": 0,
      "coverage": 2.07,
      "duration": 0.9400000000000002
    },
    "coverageDetails": {
      "statements": 2.06,
      "branches": 1.06,
      "functions": 1.2,
      "lines": 2.07
    },
    "suites": [
      {
        "name": "src/__tests__/components/ui/input.test.tsx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.383,
        "results": [
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.014,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.025,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/input.test.tsx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/layout/navigation.test.tsx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.195,
        "results": [
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/navigation.test.tsx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/ui/button.test.tsx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.106,
        "results": [
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.018,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/button.test.tsx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/features/landing-page.test.tsx",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.063,
        "results": [
          {
            "id": "src/__tests__/components/features/landing-page.test.tsx-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/landing-page.test.tsx-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/landing-page.test.tsx-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/landing-page.test.tsx-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/landing-page.test.tsx-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/ui/card.test.tsx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.073,
        "results": [
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/ui/card.test.tsx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/layout/loading-page.test.tsx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/layout/loading-page.test.tsx-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      },
      {
        "name": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.054,
        "results": [
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          },
          {
            "id": "src/__tests__/components/features/dashboard/DashboardCard.test.tsx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:26:44.820Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T17:26:44.820Z",
    "error": null
  },
  {
    "id": "test-1753723574011-6vfiw787c",
    "testType": "unit",
    "coverage": true,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 70,
      "timeout": 5000,
      "maxWorkers": 2
    },
    "success": false,
    "summary": {
      "total": 98,
      "passed": 97,
      "failed": 1,
      "running": 0,
      "coverage": 3.28,
      "duration": 0.47400000000000003
    },
    "coverageDetails": {
      "statements": 3.08,
      "branches": 2.31,
      "functions": 2.6,
      "lines": 3.28
    },
    "suites": [
      {
        "name": "src/__tests__/lib/test-history.test.ts",
        "total": 13,
        "passed": 12,
        "failed": 1,
        "running": 0,
        "duration": 0.22,
        "results": [
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager saveTestResult should save test result to history",
            "name": "TestHistoryManager saveTestResult should save test result to history",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager saveTestResult should limit history to max entries",
            "name": "TestHistoryManager saveTestResult should limit history to max entries",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestHistory should return limited test history",
            "name": "TestHistoryManager getTestHistory should return limited test history",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestHistory should return empty array when no history exists",
            "name": "TestHistoryManager getTestHistory should return empty array when no history exists",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestResult should return specific test result",
            "name": "TestHistoryManager getTestResult should return specific test result",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestResult should return null when test result not found",
            "name": "TestHistoryManager getTestResult should return null when test result not found",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestStats should calculate test statistics correctly",
            "name": "TestHistoryManager getTestStats should calculate test statistics correctly",
            "status": "failed",
            "duration": 0.002,
            "error": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"2024-01-01T01:00:00.000Z\"\nReceived: \"2024-01-01T00:00:00.000Z\"\n    at Object.toBe (/Users/sammcnab/github/workload-wizard/src/__tests__/lib/test-history.test.ts:284:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestStats should return default stats when no history exists",
            "name": "TestHistoryManager getTestStats should return default stats when no history exists",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager deleteTestResult should delete specific test result",
            "name": "TestHistoryManager deleteTestResult should delete specific test result",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager deleteTestResult should return false when test result not found",
            "name": "TestHistoryManager deleteTestResult should return false when test result not found",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager clearHistory should clear all test history",
            "name": "TestHistoryManager clearHistory should clear all test history",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager error handling should handle file read errors gracefully",
            "name": "TestHistoryManager error handling should handle file read errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager error handling should handle file write errors gracefully",
            "name": "TestHistoryManager error handling should handle file write errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/utils.test.ts",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.051,
        "results": [
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/recentActivity.test.ts",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.063,
        "results": [
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/knock-server.test.ts",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.047,
        "results": [
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/monitoring.test.ts",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.039,
        "results": [
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/calculator.test.ts",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/notify.test.ts",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:26:14.011Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T17:26:14.011Z",
    "error": null
  },
  {
    "id": "test-1753723535426-8qv0hrp0t",
    "testType": "unit",
    "coverage": true,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 70,
      "timeout": 5000,
      "maxWorkers": 2
    },
    "success": false,
    "summary": {
      "total": 98,
      "passed": 97,
      "failed": 1,
      "running": 0,
      "coverage": 3.28,
      "duration": 0.431
    },
    "coverageDetails": {
      "statements": 3.08,
      "branches": 2.31,
      "functions": 2.6,
      "lines": 3.28
    },
    "suites": [
      {
        "name": "src/__tests__/lib/test-history.test.ts",
        "total": 13,
        "passed": 12,
        "failed": 1,
        "running": 0,
        "duration": 0.204,
        "results": [
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager saveTestResult should save test result to history",
            "name": "TestHistoryManager saveTestResult should save test result to history",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager saveTestResult should limit history to max entries",
            "name": "TestHistoryManager saveTestResult should limit history to max entries",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestHistory should return limited test history",
            "name": "TestHistoryManager getTestHistory should return limited test history",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestHistory should return empty array when no history exists",
            "name": "TestHistoryManager getTestHistory should return empty array when no history exists",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestResult should return specific test result",
            "name": "TestHistoryManager getTestResult should return specific test result",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestResult should return null when test result not found",
            "name": "TestHistoryManager getTestResult should return null when test result not found",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestStats should calculate test statistics correctly",
            "name": "TestHistoryManager getTestStats should calculate test statistics correctly",
            "status": "failed",
            "duration": 0.002,
            "error": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"2024-01-01T01:00:00.000Z\"\nReceived: \"2024-01-01T00:00:00.000Z\"\n    at Object.toBe (/Users/sammcnab/github/workload-wizard/src/__tests__/lib/test-history.test.ts:284:29)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager getTestStats should return default stats when no history exists",
            "name": "TestHistoryManager getTestStats should return default stats when no history exists",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager deleteTestResult should delete specific test result",
            "name": "TestHistoryManager deleteTestResult should delete specific test result",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager deleteTestResult should return false when test result not found",
            "name": "TestHistoryManager deleteTestResult should return false when test result not found",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager clearHistory should clear all test history",
            "name": "TestHistoryManager clearHistory should clear all test history",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager error handling should handle file read errors gracefully",
            "name": "TestHistoryManager error handling should handle file read errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/test-history.test.ts-TestHistoryManager error handling should handle file write errors gracefully",
            "name": "TestHistoryManager error handling should handle file write errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/recentActivity.test.ts",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.045,
        "results": [
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/recentActivity.test.ts-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/knock-server.test.ts",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/knock-server.test.ts-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/utils.test.ts",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/utils.test.ts-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/calculator.test.ts",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/calculator.test.ts-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/monitoring.test.ts",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/monitoring.test.ts-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      },
      {
        "name": "src/__tests__/lib/notify.test.ts",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          },
          {
            "id": "src/__tests__/lib/notify.test.ts-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:25:35.426Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T17:25:35.426Z",
    "error": null
  },
  {
    "id": "test-1753722807974-8b5a4vst0",
    "testType": "component",
    "coverage": true,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 70,
      "timeout": 5000,
      "maxWorkers": 4
    },
    "success": true,
    "summary": {
      "total": 88,
      "passed": 88,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 0.954
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.466,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.03,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.014,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.015,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.109,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.026,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.061,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.094,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.025,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.078,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.085,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.061,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T17:13:27.974Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T17:13:27.974Z",
    "error": null
  },
  {
    "id": "test-1753722798277-igge1k43e",
    "testType": "unit",
    "coverage": true,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 70,
      "timeout": 5000,
      "maxWorkers": 4
    },
    "success": true,
    "summary": {
      "total": 85,
      "passed": 85,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 0.381
    },
    "suites": [
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.198,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.048,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.042,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T17:13:18.277Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T17:13:18.277Z",
    "error": null
  },
  {
    "id": "test-1753721941853-da8ib49nf",
    "testType": "unit",
    "coverage": false,
    "config": {
      "environment": "jsdom",
      "coverageThreshold": 80,
      "timeout": 10000,
      "maxWorkers": 2
    },
    "success": true,
    "summary": {
      "total": 85,
      "passed": 85,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.421
    },
    "suites": [
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.226,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.053,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.041,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.04,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.028,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:59:01.853Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:59:01.853Z",
    "error": null
  },
  {
    "id": "test-1753721718872-k54enicon",
    "testType": "all",
    "coverage": true,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 1.403
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.466,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.024,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.057,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.094,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.056,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.082,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.019,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.069,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.069,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.076,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.064,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.05,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.077,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.031,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.03,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.043,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:55:18.872Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:55:18.872Z",
    "error": null
  },
  {
    "id": "test-1753720920888-hkl0b2njs",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 85,
      "passed": 85,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.394
    },
    "suites": [
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.206,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.887Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.046,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.041,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.029,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.04,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.032,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:42:00.888Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:42:00.888Z",
    "error": null
  },
  {
    "id": "test-1753720852628-vvpbxsm5w",
    "testType": "unit",
    "coverage": false,
    "success": false,
    "summary": {
      "total": 86,
      "passed": 85,
      "failed": 1,
      "running": 0,
      "coverage": 0,
      "duration": 0.333
    },
    "suites": [
      {
        "name": "failing-test",
        "total": 1,
        "passed": 0,
        "failed": 1,
        "running": 0,
        "duration": 0.121,
        "results": [
          {
            "id": "failing-test-Failing Test should fail",
            "name": "Failing Test should fail",
            "status": "failed",
            "duration": 0.002,
            "error": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 2\nReceived: 1\n    at Object.toBe (/Users/sammcnab/github/workload-wizard/src/__tests__/lib/failing-test.test.ts:1:72)\n    at Promise.then.completed (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/sammcnab/github/workload-wizard/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-runner/build/runTest.js:444:34)",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.049,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.042,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.031,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.029,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:52.628Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:40:52.628Z",
    "error": null
  },
  {
    "id": "test-1753720846731-ulyilc7l0",
    "testType": "unit",
    "coverage": false,
    "success": false,
    "summary": {
      "total": 86,
      "passed": 85,
      "failed": 1,
      "running": 0,
      "coverage": 0,
      "duration": 0.412
    },
    "suites": [
      {
        "name": "failing-test",
        "total": 1,
        "passed": 0,
        "failed": 1,
        "running": 0,
        "duration": 0.191,
        "results": [
          {
            "id": "failing-test-Failing Test should fail",
            "name": "Failing Test should fail",
            "status": "failed",
            "duration": 0.002,
            "error": "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 2\nReceived: 1\n    at Object.toBe (/Users/sammcnab/github/workload-wizard/src/__tests__/lib/failing-test.test.ts:1:72)\n    at Promise.then.completed (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/sammcnab/github/workload-wizard/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/sammcnab/github/workload-wizard/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/sammcnab/github/workload-wizard/node_modules/jest-runner/build/runTest.js:444:34)",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.047,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.045,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.032,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:46.731Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:40:46.731Z",
    "error": null
  },
  {
    "id": "test-1753720834858-85bcy4je7",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 85,
      "passed": 85,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.388
    },
    "suites": [
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.203,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.053,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.03,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:40:34.858Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:40:34.858Z",
    "error": null
  },
  {
    "id": "test-1753720632100-hjggg5v05",
    "testType": "all",
    "coverage": true,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 1.319
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.441,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.023,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.015,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.055,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.082,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.028,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.093,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.079,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.063,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.055,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.062,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.043,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.047,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.043,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:37:12.100Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:37:12.100Z"
  },
  {
    "id": "test-1753720591177-adzv5j2ha",
    "testType": "hook",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 40,
      "passed": 40,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.449
    },
    "suites": [
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.239,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.022,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.088,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.075,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.047,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:36:31.177Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:36:31.177Z"
  },
  {
    "id": "test-1753720585890-efrlymgl4",
    "testType": "component",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 88,
      "passed": 88,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.833
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.397,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.025,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.106,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.094,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.024,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.064,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.061,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.061,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.05,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:36:25.890Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:36:25.890Z"
  },
  {
    "id": "test-1753720578653-gnhe7pko6",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 85,
      "passed": 85,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 0.515
    },
    "suites": [
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.26,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.057,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.056,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.053,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.051,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.038,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:36:18.653Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:36:18.653Z"
  },
  {
    "id": "test-1753720549549-5tgan9oor",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 1.552
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.488,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.026,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.014,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.139,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.035,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.072,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.094,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.029,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.077,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.083,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.07,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.055,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.063,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.065,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.079,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.053,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.052,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.031,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.044,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:49.549Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:35:49.549Z"
  },
  {
    "id": "test-1753720518775-bh5nifrho",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 1.646
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.507,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.026,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.133,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.03,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.013,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.114,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.094,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.024,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.097,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.015,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.061,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.068,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.056,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.054,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.064,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.093,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.065,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.068,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.037,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.036,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.03,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:35:18.775Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:35:18.775Z"
  },
  {
    "id": "test-1753720489328-qv11zblp4",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 1.676
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.512,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.027,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.126,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.03,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.097,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.025,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.068,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.076,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.1,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.021,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.076,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.085,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.327Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.111,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.327Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.068,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.055,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.07,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.034,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.033,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.039,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:34:49.328Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:34:49.328Z"
  },
  {
    "id": "test-1753720412540-s6b17tdbp",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 1.457
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.465,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.024,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.114,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.03,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.082,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.011,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.096,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.027,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.081,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.074,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.047,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.068,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.069,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.05,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:33:32.539Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.058,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.539Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.048,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.028,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.028,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.029,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:33:32.540Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:33:32.540Z"
  },
  {
    "id": "test-1753720332019-wtxt0iyo2",
    "testType": "all",
    "coverage": true,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 1.339
    },
    "suites": [
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.463,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.022,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.087,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.086,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.01,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.064,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.055,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.078,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.023,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.058,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.053,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.05,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.04,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.045,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.03,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.024,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.018Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.024,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:32:12.019Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:32:12.019Z"
  },
  {
    "id": "test-1753719021464-u8ma0751y",
    "testType": "all",
    "coverage": true,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 8.2,
      "duration": 1.329
    },
    "suites": [
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.348,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.189,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.017,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.08,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.022,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.086,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.054,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.052,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.058,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.073,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.051,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.048,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.039,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.024,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.024,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T16:10:21.464Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T16:10:21.464Z"
  },
  {
    "id": "test-1753717856463-22doeq1lf",
    "testType": "unit",
    "coverage": false,
    "success": true,
    "summary": {
      "total": 214,
      "passed": 214,
      "failed": 0,
      "running": 0,
      "coverage": 0,
      "duration": 1.363
    },
    "suites": [
      {
        "name": "useDevMode",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.345,
        "results": [
          {
            "id": "useDevMode-useDevMode when user is admin should initialize with dev mode disabled by default",
            "name": "useDevMode when user is admin should initialize with dev mode disabled by default",
            "status": "passed",
            "duration": 0.008,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should load dev mode from localStorage when available",
            "name": "useDevMode when user is admin should load dev mode from localStorage when available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should toggle dev mode and save to localStorage",
            "name": "useDevMode when user is admin should toggle dev mode and save to localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should disable dev mode and update localStorage",
            "name": "useDevMode when user is admin should disable dev mode and update localStorage",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is admin should handle localStorage errors gracefully",
            "name": "useDevMode when user is admin should handle localStorage errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not allow dev mode for non-admin users",
            "name": "useDevMode when user is not admin should not allow dev mode for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "name": "useDevMode when user is not admin should not save dev mode to localStorage for non-admin users",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is administrator should allow dev mode for administrator users",
            "name": "useDevMode when user is administrator should allow dev mode for administrator users",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "name": "useDevMode when user is not loaded should not allow dev mode when user is not loaded",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "name": "useDevMode when profile fields are not available should not allow dev mode when profile fields are not available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevMode-useDevMode localStorage error handling should handle localStorage getItem errors",
            "name": "useDevMode localStorage error handling should handle localStorage getItem errors",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "navigationx",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.195,
        "results": [
          {
            "id": "navigationx-Navigation should render the logo and brand name",
            "name": "Navigation should render the logo and brand name",
            "status": "passed",
            "duration": 0.018,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should render all navigation items",
            "name": "Navigation should render all navigation items",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should highlight active tab",
            "name": "Navigation should highlight active tab",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should navigate when navigation item is clicked",
            "name": "Navigation should navigate when navigation item is clicked",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should render user profile dropdown",
            "name": "Navigation should render user profile dropdown",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should render notifications",
            "name": "Navigation should render notifications",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should render mobile menu button on smaller screens",
            "name": "Navigation should render mobile menu button on smaller screens",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for header",
            "name": "Navigation should have correct CSS classes for header",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should have correct CSS classes for logo container",
            "name": "Navigation should have correct CSS classes for logo container",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should handle navigation with href properly",
            "name": "Navigation should handle navigation with href properly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should render with dark mode classes",
            "name": "Navigation should render with dark mode classes",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should handle profile modal state correctly",
            "name": "Navigation should handle profile modal state correctly",
            "status": "passed",
            "duration": 0.012,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "navigationx-Navigation should handle settings modal state correctly",
            "name": "Navigation should handle settings modal state correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "buttonx",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.091,
        "results": [
          {
            "id": "buttonx-Button should render button with default variant",
            "name": "Button should render button with default variant",
            "status": "passed",
            "duration": 0.016,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should render button with different variants",
            "name": "Button should render button with different variants",
            "status": "passed",
            "duration": 0.009,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should render button with different sizes",
            "name": "Button should render button with different sizes",
            "status": "passed",
            "duration": 0.007,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should handle click events",
            "name": "Button should handle click events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should be disabled when disabled prop is true",
            "name": "Button should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should not trigger click when disabled",
            "name": "Button should not trigger click when disabled",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should render as a link when asChild is true",
            "name": "Button should render as a link when asChild is true",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should apply custom className",
            "name": "Button should apply custom className",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should forward ref",
            "name": "Button should forward ref",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should have proper accessibility attributes",
            "name": "Button should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "buttonx-Button should handle loading state",
            "name": "Button should handle loading state",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "loading-pagex",
        "total": 13,
        "passed": 13,
        "failed": 0,
        "running": 0,
        "duration": 0.067,
        "results": [
          {
            "id": "loading-pagex-LoadingPage should render with default progress",
            "name": "LoadingPage should render with default progress",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with custom progress",
            "name": "LoadingPage should render with custom progress",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 0% progress",
            "name": "LoadingPage should render with 0% progress",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with 100% progress",
            "name": "LoadingPage should render with 100% progress",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle decimal progress values",
            "name": "LoadingPage should handle decimal progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have correct CSS classes",
            "name": "LoadingPage should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render the logo icon",
            "name": "LoadingPage should render the logo icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render progress bar container",
            "name": "LoadingPage should render progress bar container",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle negative progress values",
            "name": "LoadingPage should handle negative progress values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should handle progress values over 100",
            "name": "LoadingPage should handle progress values over 100",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have proper accessibility attributes",
            "name": "LoadingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should render with dark mode classes",
            "name": "LoadingPage should render with dark mode classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "loading-pagex-LoadingPage should have smooth transition on progress changes",
            "name": "LoadingPage should have smooth transition on progress changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "useDevSettings",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "useDevSettings-useDevSettings initial state should initialize with dev settings closed",
            "name": "useDevSettings initial state should initialize with dev settings closed",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should open dev settings",
            "name": "useDevSettings openDevSettings should open dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings openDevSettings should notify all listeners when opening",
            "name": "useDevSettings openDevSettings should notify all listeners when opening",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should close dev settings",
            "name": "useDevSettings closeDevSettings should close dev settings",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings closeDevSettings should notify all listeners when closing",
            "name": "useDevSettings closeDevSettings should notify all listeners when closing",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from closed to open",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "name": "useDevSettings toggleDevSettings should toggle dev settings from open to closed",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings toggleDevSettings should notify all listeners when toggling",
            "name": "useDevSettings toggleDevSettings should notify all listeners when toggling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "name": "useDevSettings multiple instances should maintain consistent state across multiple hook instances",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings cleanup should remove listeners when component unmounts",
            "name": "useDevSettings cleanup should remove listeners when component unmounts",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle rapid state changes",
            "name": "useDevSettings edge cases should handle rapid state changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useDevSettings-useDevSettings edge cases should handle multiple rapid toggles",
            "name": "useDevSettings edge cases should handle multiple rapid toggles",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "inputx",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.093,
        "results": [
          {
            "id": "inputx-Input should render input with default styling",
            "name": "Input should render input with default styling",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle value changes",
            "name": "Input should handle value changes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should apply custom className",
            "name": "Input should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle different input types",
            "name": "Input should handle different input types",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should be disabled when disabled prop is true",
            "name": "Input should be disabled when disabled prop is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should be read-only when readOnly prop is true",
            "name": "Input should be read-only when readOnly prop is true",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle controlled value",
            "name": "Input should handle controlled value",
            "status": "passed",
            "duration": 0.022,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle ref prop",
            "name": "Input should handle ref prop",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle focus and blur events",
            "name": "Input should handle focus and blur events",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle key events",
            "name": "Input should handle key events",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should have proper accessibility attributes",
            "name": "Input should have proper accessibility attributes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle required attribute",
            "name": "Input should handle required attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle min and max attributes for number inputs",
            "name": "Input should handle min and max attributes for number inputs",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle step attribute for number inputs",
            "name": "Input should handle step attribute for number inputs",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle pattern attribute",
            "name": "Input should handle pattern attribute",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle autoComplete attribute",
            "name": "Input should handle autoComplete attribute",
            "status": "passed",
            "duration": 0.014,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle spellCheck attribute",
            "name": "Input should handle spellCheck attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "inputx-Input should handle autoFocus attribute",
            "name": "Input should handle autoFocus attribute",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "cardx",
        "total": 16,
        "passed": 16,
        "failed": 0,
        "running": 0,
        "duration": 0.057,
        "results": [
          {
            "id": "cardx-Card Components Card should render card with default styling",
            "name": "Card Components Card should render card with default styling",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components Card should apply custom className",
            "name": "Card Components Card should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardHeader should render card header with proper styling",
            "name": "Card Components CardHeader should render card header with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardHeader should apply custom className",
            "name": "Card Components CardHeader should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render card title with proper styling",
            "name": "Card Components CardTitle should render card title with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardTitle should render as div by default",
            "name": "Card Components CardTitle should render as div by default",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardTitle should apply custom className",
            "name": "Card Components CardTitle should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardDescription should render card description with proper styling",
            "name": "Card Components CardDescription should render card description with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardDescription should apply custom className",
            "name": "Card Components CardDescription should apply custom className",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardContent should render card content with proper styling",
            "name": "Card Components CardContent should render card content with proper styling",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardContent should apply custom className",
            "name": "Card Components CardContent should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardFooter should render card footer with proper styling",
            "name": "Card Components CardFooter should render card footer with proper styling",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components CardFooter should apply custom className",
            "name": "Card Components CardFooter should apply custom className",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components Card Integration should render a complete card with all components",
            "name": "Card Components Card Integration should render a complete card with all components",
            "status": "passed",
            "duration": 0.006,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components Card Integration should maintain proper semantic structure",
            "name": "Card Components Card Integration should maintain proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "cardx-Card Components Card Integration should handle nested content properly",
            "name": "Card Components Card Integration should handle nested content properly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "landing-pagex",
        "total": 5,
        "passed": 5,
        "failed": 0,
        "running": 0,
        "duration": 0.059,
        "results": [
          {
            "id": "landing-pagex-LandingPage should render the landing page component",
            "name": "LandingPage should render the landing page component",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "landing-pagex-LandingPage should render the main content sections",
            "name": "LandingPage should render the main content sections",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper accessibility attributes",
            "name": "LandingPage should have proper accessibility attributes",
            "status": "passed",
            "duration": 0.004,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "landing-pagex-LandingPage should render main content",
            "name": "LandingPage should render main content",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "landing-pagex-LandingPage should have proper semantic structure",
            "name": "LandingPage should have proper semantic structure",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "DashboardCardx",
        "total": 12,
        "passed": 12,
        "failed": 0,
        "running": 0,
        "duration": 0.051,
        "results": [
          {
            "id": "DashboardCardx-DashboardCard should render with basic props",
            "name": "DashboardCard should render with basic props",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with subtitle",
            "name": "DashboardCard should render with subtitle",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with icon",
            "name": "DashboardCard should render with icon",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should apply highlight styling when highlight is true",
            "name": "DashboardCard should apply highlight styling when highlight is true",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is false",
            "name": "DashboardCard should not apply highlight styling when highlight is false",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should not apply highlight styling when highlight is undefined",
            "name": "DashboardCard should not apply highlight styling when highlight is undefined",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle numeric values",
            "name": "DashboardCard should handle numeric values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle string values",
            "name": "DashboardCard should handle string values",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should render with all props",
            "name": "DashboardCard should render with all props",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should have correct CSS classes",
            "name": "DashboardCard should have correct CSS classes",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle empty subtitle gracefully",
            "name": "DashboardCard should handle empty subtitle gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "DashboardCardx-DashboardCard should handle null icon gracefully",
            "name": "DashboardCard should handle null icon gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "component",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "useLoadingOverlayx",
        "total": 9,
        "passed": 9,
        "failed": 0,
        "running": 0,
        "duration": 0.057,
        "results": [
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should return loading state and setLoading function",
            "name": "useLoadingOverlay should return loading state and setLoading function",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should show loading overlay initially",
            "name": "useLoadingOverlay should show loading overlay initially",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should hide loading overlay after timeout",
            "name": "useLoadingOverlay should hide loading overlay after timeout",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should have fallback timeout of 2 seconds",
            "name": "useLoadingOverlay should have fallback timeout of 2 seconds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should allow manual control of loading state",
            "name": "useLoadingOverlay should allow manual control of loading state",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should render children content",
            "name": "useLoadingOverlay should render children content",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should clean up timeouts on unmount",
            "name": "useLoadingOverlay should clean up timeouts on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should work with nested components",
            "name": "useLoadingOverlay should work with nested components",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "useLoadingOverlayx-useLoadingOverlay should handle multiple setLoading calls",
            "name": "useLoadingOverlay should handle multiple setLoading calls",
            "status": "passed",
            "duration": 0.003,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "use-mobile",
        "total": 8,
        "passed": 8,
        "failed": 0,
        "running": 0,
        "duration": 0.066,
        "results": [
          {
            "id": "use-mobile-useIsMobile should return false for desktop width",
            "name": "useIsMobile should return false for desktop width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for mobile width",
            "name": "useIsMobile should return true for mobile width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should return true for tablet width (below breakpoint)",
            "name": "useIsMobile should return true for tablet width (below breakpoint)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should return false for tablet width (at breakpoint)",
            "name": "useIsMobile should return false for tablet width (at breakpoint)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle window resize events",
            "name": "useIsMobile should handle window resize events",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should clean up event listeners on unmount",
            "name": "useIsMobile should clean up event listeners on unmount",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of exactly 768px width",
            "name": "useIsMobile should handle edge case of exactly 768px width",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "use-mobile-useIsMobile should handle edge case of 767px width",
            "name": "useIsMobile should handle edge case of 767px width",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "hook",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "test-utilsx",
        "total": 1,
        "passed": 1,
        "failed": 0,
        "running": 0,
        "duration": 0.041,
        "results": [
          {
            "id": "test-utilsx-Test Utils should render a simple component",
            "name": "Test Utils should render a simple component",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "other",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "knock-server",
        "total": 4,
        "passed": 4,
        "failed": 0,
        "running": 0,
        "duration": 0.045,
        "results": [
          {
            "id": "knock-server-knock-server identifyKnockUser should identify a user when Knock client is available",
            "name": "knock-server identifyKnockUser should identify a user when Knock client is available",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "knock-server-knock-server identifyKnockUser should handle API errors gracefully",
            "name": "knock-server identifyKnockUser should handle API errors gracefully",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "name": "knock-server triggerKnockWorkflow should trigger a workflow when Knock client is available",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "knock-server-knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "name": "knock-server triggerKnockWorkflow should handle workflow trigger errors gracefully",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "utils",
        "total": 20,
        "passed": 20,
        "failed": 0,
        "running": 0,
        "duration": 0.031,
        "results": [
          {
            "id": "utils-utils cn should merge class names correctly",
            "name": "utils cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils cn should handle conditional classes",
            "name": "utils cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils cn should handle arrays and objects",
            "name": "utils cn should handle arrays and objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils updateSettings should update nested settings correctly",
            "name": "utils updateSettings should update nested settings correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils updateSettings should preserve other categories when updating one",
            "name": "utils updateSettings should preserve other categories when updating one",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "name": "utils generateContractAndHours should generate correct contract string for Academic Practitioner",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils generateContractAndHours should generate correct contract string for Research Academic",
            "name": "utils generateContractAndHours should generate correct contract string for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle decimal FTE values correctly",
            "name": "utils generateContractAndHours should handle decimal FTE values correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils generateContractAndHours should handle unknown family gracefully",
            "name": "utils generateContractAndHours should handle unknown family gracefully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "name": "utils calculateTeachingHours should calculate teaching hours for Academic Practitioner",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Teaching Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "name": "utils calculateTeachingHours should calculate teaching hours for Research Academic",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle zero allocated hours",
            "name": "utils calculateTeachingHours should handle zero allocated hours",
            "status": "passed",
            "duration": 0.005,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils calculateTeachingHours should handle unknown family with fallback",
            "name": "utils calculateTeachingHours should handle unknown family with fallback",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils deepEqual should return true for identical objects",
            "name": "utils deepEqual should return true for identical objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils deepEqual should return false for different objects",
            "name": "utils deepEqual should return false for different objects",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils deepEqual should handle arrays",
            "name": "utils deepEqual should handle arrays",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils deepEqual should handle null and undefined",
            "name": "utils deepEqual should handle null and undefined",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "utils-utils deepEqual should handle primitive values",
            "name": "utils deepEqual should handle primitive values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "monitoring",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.028,
        "results": [
          {
            "id": "monitoring-monitoring SystemMonitor getInstance should return the same instance",
            "name": "monitoring SystemMonitor getInstance should return the same instance",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "name": "monitoring SystemMonitor startMonitoring should start monitoring when not already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "name": "monitoring SystemMonitor startMonitoring should not start monitoring if already running",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "name": "monitoring SystemMonitor stopMonitoring should stop monitoring and clear interval",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "name": "monitoring SystemMonitor collectMetrics should collect system metrics successfully",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "name": "monitoring SystemMonitor collectMetrics should handle errors gracefully and return fallback metrics",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getMemoryInfo should return memory information",
            "name": "monitoring SystemMonitor getMemoryInfo should return memory information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getCpuInfo should return CPU information",
            "name": "monitoring SystemMonitor getCpuInfo should return CPU information",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return active users count from API",
            "name": "monitoring SystemMonitor getActiveUsers should return active users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getActiveUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return total users count from API",
            "name": "monitoring SystemMonitor getTotalUsers should return total users count from API",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "name": "monitoring SystemMonitor getTotalUsers should return fallback value when API fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "name": "monitoring SystemMonitor getDatabaseQueries should return simulated database queries count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "name": "monitoring SystemMonitor getApiRequests should return simulated API requests count",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring SystemMonitor getErrorRate should return simulated error rate",
            "name": "monitoring SystemMonitor getErrorRate should return simulated error rate",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return true when health check succeeds",
            "name": "monitoring healthCheck should return true when health check succeeds",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check fails",
            "name": "monitoring healthCheck should return false when health check fails",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "monitoring-monitoring healthCheck should return false when health check throws error",
            "name": "monitoring healthCheck should return false when health check throws error",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "recentActivity",
        "total": 11,
        "passed": 11,
        "failed": 0,
        "running": 0,
        "duration": 0.027,
        "results": [
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity",
            "name": "recentActivity formatRecentActivity should format lecturer created activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "name": "recentActivity formatRecentActivity should format lecturer created activity without modifiedBy",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer deleted activity",
            "name": "recentActivity formatRecentActivity should format lecturer deleted activity",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity with section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity with section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format lecturer edited activity without section",
            "name": "recentActivity formatRecentActivity should format lecturer edited activity without section",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity for unknown types",
            "name": "recentActivity formatRecentActivity should format generic activity for unknown types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should format generic activity without action",
            "name": "recentActivity formatRecentActivity should format generic activity without action",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle empty modifiedBy array",
            "name": "recentActivity formatRecentActivity should handle empty modifiedBy array",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "name": "recentActivity formatRecentActivity should handle missing fullName for lecturer types",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "name": "recentActivity formatRecentActivity should handle missing details for lecturer_edited",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "recentActivity-recentActivity RecentActivityArgs type should accept valid activity arguments",
            "name": "recentActivity RecentActivityArgs type should accept valid activity arguments",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "calculator",
        "total": 18,
        "passed": 18,
        "failed": 0,
        "running": 0,
        "duration": 0.025,
        "results": [
          {
            "id": "calculator-calculator totalAllocated should calculate total allocated hours correctly",
            "name": "calculator totalAllocated should calculate total allocated hours correctly",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle negative values",
            "name": "calculator totalAllocated should handle negative values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator totalAllocated should handle decimal values",
            "name": "calculator totalAllocated should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator capacity should calculate remaining capacity correctly",
            "name": "calculator capacity should calculate remaining capacity correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator capacity should handle zero values",
            "name": "calculator capacity should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator capacity should handle negative capacity (over-allocation)",
            "name": "calculator capacity should handle negative capacity (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator capacity should handle decimal values",
            "name": "calculator capacity should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should calculate teaching availability correctly",
            "name": "calculator teachingAvailability should calculate teaching availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle zero values",
            "name": "calculator teachingAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle negative availability (over-allocation)",
            "name": "calculator teachingAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator teachingAvailability should handle decimal values",
            "name": "calculator teachingAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator adminAvailability should calculate administrative availability correctly",
            "name": "calculator adminAvailability should calculate administrative availability correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle zero values",
            "name": "calculator adminAvailability should handle zero values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle negative availability (over-allocation)",
            "name": "calculator adminAvailability should handle negative availability (over-allocation)",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator adminAvailability should handle decimal values",
            "name": "calculator adminAvailability should handle decimal values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator integration scenarios should work together for a complete workload calculation",
            "name": "calculator integration scenarios should work together for a complete workload calculation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle edge case of full allocation",
            "name": "calculator integration scenarios should handle edge case of full allocation",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "calculator-calculator integration scenarios should handle over-allocation scenario",
            "name": "calculator integration scenarios should handle over-allocation scenario",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      },
      {
        "name": "notify",
        "total": 14,
        "passed": 14,
        "failed": 0,
        "running": 0,
        "duration": 0.026,
        "results": [
          {
            "id": "notify-notify cn should merge class names correctly",
            "name": "notify cn should merge class names correctly",
            "status": "passed",
            "duration": 0.002,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify cn should handle conditional classes",
            "name": "notify cn should handle conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify cn should handle false conditional classes",
            "name": "notify cn should handle false conditional classes",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify cn should handle empty strings and null values",
            "name": "notify cn should handle empty strings and null values",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify cn should handle object syntax",
            "name": "notify cn should handle object syntax",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should return \"just now\" for very recent times",
            "name": "notify timeAgo should return \"just now\" for very recent times",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format seconds correctly",
            "name": "notify timeAgo should format seconds correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format minutes correctly",
            "name": "notify timeAgo should format minutes correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format hours correctly",
            "name": "notify timeAgo should format hours correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format days correctly",
            "name": "notify timeAgo should format days correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format months correctly",
            "name": "notify timeAgo should format months correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should format years correctly",
            "name": "notify timeAgo should format years correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should handle singular vs plural correctly",
            "name": "notify timeAgo should handle singular vs plural correctly",
            "status": "passed",
            "duration": 0,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          },
          {
            "id": "notify-notify timeAgo should handle edge case of exactly one unit",
            "name": "notify timeAgo should handle edge case of exactly one unit",
            "status": "passed",
            "duration": 0.001,
            "error": "",
            "category": "unit",
            "timestamp": "2025-07-28T15:50:56.463Z"
          }
        ]
      }
    ],
    "timestamp": "2025-07-28T15:50:56.463Z"
  }
]