---
description: Guidelines and best practices for Conventional Commit Messages, including structure, types, scopes, breaking changes, and formatting examples
globs: **/*.{md,mdc}
---

# Conventional Commit Message Specification

Use the Conventional Commit Messages specification to generate commit messages.

## Commit Message Format

A commit message **MUST** be structured as follows:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Structural Elements

The commit message contains the following components to convey intent:

* **fix**: Patches a bug in your codebase (correlates with `PATCH` in Semantic Versioning).
* **feat**: Introduces a new feature to the codebase (correlates with `MINOR` in Semantic Versioning).
* **BREAKING CHANGE**:

  * Either a footer `BREAKING CHANGE:` or a `!` after the type/scope introduces a breaking API change (correlates with `MAJOR` in Semantic Versioning).
  * Can be used in any commit type.

Other types (recommended by [@commitlint/config-conventional](https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional)) include:

* `build`: Changes that affect the build system or external dependencies
* `chore`: Routine tasks or maintenance
* `ci`: Changes to CI configuration
* `docs`: Documentation-only changes
* `style`: Code style (formatting, missing semicolons, etc.)
* `refactor`: Code changes that neither fix a bug nor add a feature
* `perf`: Performance improvements
* `test`: Adding or updating tests

Footers other than `BREAKING CHANGE:` may follow the [Git trailer convention](https://git-scm.com/docs/git-interpret-trailers).

A **scope** may be provided to give contextual information, e.g.:

```
feat(parser): add array support
```

---

## Specification Details

Terminology from [RFC 2119](https://datatracker.ietf.org/doc/html/rfc2119) applies.

* Commits **MUST** begin with a **type** (e.g., `feat`, `fix`)
* An optional **scope** can follow, formatted as a noun in parentheses, e.g., `fix(api)`
* A **!** indicates a breaking change if placed before the colon, e.g., `feat!:`
* A **description** follows the colon and space, e.g., `feat: add login support`
* The **body** (optional) starts one blank line after the description and can be multiple paragraphs
* One or more **footers** (optional) can follow after another blank line

### Footers

* **Format**: `Token: value` or `Token #value`
* Tokens **MUST** use `-` instead of spaces, e.g., `Acked-by`
* `BREAKING CHANGE` is the exception and must be uppercase
* Multi-line values are allowed
* Footer parsing ends when a new token/separator is found

### Breaking Changes

Breaking changes **MUST** be indicated by:

1. **Prefix method**:

   ```
   feat!: remove deprecated auth flow
   ```

2. **Footer method**:

   ```
   BREAKING CHANGE: environment variables now override config files
   ```

If the `!` prefix is used, the footer `BREAKING CHANGE:` may be omitted if the description explains the change.

---

## Additional Notes

* Types are **not** case-sensitive, except `BREAKING CHANGE`
* `BREAKING-CHANGE` is synonymous with `BREAKING CHANGE` in footer usage
