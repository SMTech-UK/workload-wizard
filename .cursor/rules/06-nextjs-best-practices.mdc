---
description: Best practices for building with the Next.js App Router
priority: 10
globs: \["**/\*.ts", "**/\*.tsx"]
---

# Next.js App Router Best Practices

## Routing

* Use file-based routing inside `/src/app`
* Use `[param]` for dynamic segments
* Use `layout.tsx` and `page.tsx` as required
* Add `error.tsx` and `loading.tsx` for each route as needed

## Component Type

* Use Server Components by default
* Add `'use client'` only when interactive behaviour is required
* Client components should be small and encapsulated

## API Routes

* Use `route.ts` in `/app/api/...` for handlers
* Handle method types explicitly with conditional logic

## Data Fetching

* Use RSC or `getServerSideProps` as default
* Avoid `useEffect` for data loading unless client-only
* Use Suspense and `fallback` when needed

## Metadata & SEO

* Set metadata with `generateMetadata()`
* Use `next/head` only in legacy Pages Router

## Image Optimisation

* Use `<Image />` from `next/image`
* Define `width`, `height`, or `fill` when rendering
* Prefer `WebP` or `AVIF` formats

## Environment Config

* Use `process.env.NEXT_PUBLIC_*` for client-side vars
* Store secrets securely via Vercel dashboard

## Error Boundaries

* Create `error.tsx` files to gracefully catch failures
* Avoid try/catch inside layout-level components

## Layout Composition

```ts
// app/dashboard/layout.tsx
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <main className="p-4">
      <Sidebar />
      <div>{children}</div>
    </main>
  );
}
```

## Performance

* Minimise usage of large client bundles
* Defer loading with dynamic imports
* Optimise Web Vitals: LCP, CLS, FID

## Naming

* Use lowercase-dash-case for folders: `admin-dashboard`, `user-profile`
* Use PascalCase for components and files: `UserCard.tsx`, `PageLayout.tsx`
