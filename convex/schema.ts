import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  academic_years: defineTable({
    createdAt: v.float64(),
    description: v.string(),
    endDate: v.string(),
    isActive: v.boolean(),
    isStaging: v.boolean(),
    name: v.string(),
    organisationId: v.null(),
    startDate: v.string(),
    updatedAt: v.float64(),
  }),
  data_migrations: defineTable({
    appliedAt: v.float64(),
    createdAt: v.float64(),
    details: v.object({
      recordsProcessed: v.float64(),
      recordsTotal: v.float64(),
    }),
    duration: v.float64(),
    name: v.string(),
    status: v.string(),
    version: v.string(),
  }),
  dept_summary: defineTable({
    assignedHours: v.float64(),
    createdAt: v.float64(),
    department: v.string(),
    lecturers: v.float64(),
    modules: v.float64(),
    overloadedStaff: v.float64(),
    totalCapacity: v.float64(),
    type: v.string(),
    updatedAt: v.float64(),
    utilizationRate: v.float64(),
  }),
  lecturer_profiles: defineTable({
    capacity: v.float64(),
    contract: v.string(),
    createdAt: v.float64(),
    email: v.string(),
    family: v.string(),
    fte: v.float64(),
    fullName: v.string(),
    maxTeachingHours: v.float64(),
    role: v.string(),
    specialism: v.string(),
    team: v.string(),
    totalContract: v.float64(),
    updatedAt: v.float64(),
  }),
  lecturers: defineTable({
    academicYearId: v.id("academic_years"),
    allocatedAdminHours: v.float64(),
    allocatedTeachingHours: v.float64(),
    capacity: v.float64(),
    contract: v.string(),
    createdAt: v.float64(),
    email: v.string(),
    family: v.string(),
    fte: v.float64(),
    fullName: v.string(),
    isActive: v.boolean(),
    maxTeachingHours: v.float64(),
    profileId: v.id("lecturer_profiles"),
    role: v.string(),
    specialism: v.string(),
    status: v.string(),
    teachingAvailability: v.float64(),
    team: v.string(),
    totalAllocated: v.float64(),
    totalContract: v.float64(),
    updatedAt: v.float64(),
  }),
  module_allocations: defineTable({
    createdAt: v.float64(),
    groupNumber: v.float64(),
    hoursAllocated: v.float64(),
    isActive: v.boolean(),
    lecturerId: v.id("lecturers"),
    moduleCode: v.string(),
    moduleName: v.string(),
    semester: v.string(),
    siteName: v.string(),
    type: v.string(),
    updatedAt: v.float64(),
  }),
  module_iterations: defineTable({
    academicYearId: v.id("academic_years"),
    assessments: v.array(
      v.object({
        alertsToTeam: v.boolean(),
        externalExaminerRequired: v.boolean(),
        isSecondAttempt: v.boolean(),
        marksDueDate: v.string(),
        submissionDate: v.string(),
        title: v.string(),
        type: v.string(),
        weighting: v.float64(),
      })
    ),
    assignedLecturerId: v.string(),
    assignedLecturerIds: v.array(v.id("lecturers")),
    assignedStatus: v.string(),
    cohortId: v.string(),
    createdAt: v.float64(),
    isActive: v.boolean(),
    markingHours: v.float64(),
    moduleCode: v.string(),
    notes: v.string(),
    semester: v.float64(),
    sites: v.array(
      v.object({
        deliveryTime: v.string(),
        groups: v.float64(),
        name: v.string(),
        students: v.float64(),
      })
    ),
    teachingHours: v.float64(),
    teachingStartDate: v.string(),
    title: v.string(),
    updatedAt: v.float64(),
  }),
  module_profiles: defineTable({
    code: v.string(),
    createdAt: v.float64(),
    credits: v.float64(),
    defaultMarkingHours: v.float64(),
    defaultTeachingHours: v.float64(),
    level: v.float64(),
    moduleLeader: v.string(),
    title: v.string(),
    updatedAt: v.float64(),
  }),
  modules: defineTable({
    academicYearId: v.string(),
    code: v.string(),
    credits: v.float64(),
    defaultMarkingHours: v.float64(),
    defaultTeachingHours: v.float64(),
    level: v.float64(),
    moduleLeader: v.string(),
    profileId: v.id("module_profiles"),
    title: v.string(),
    updatedAt: v.float64(),
  }),
  organisations: defineTable({
    createdAt: v.float64(),
    name: v.string(),
    standardClassSize: v.float64(),
    updatedAt: v.float64(),
  }),
  recent_activity: defineTable({
    action: v.string(),
    changeType: v.string(),
    details: v.optional(
      v.object({
        fullName: v.string(),
        lecturerId: v.id("lecturers"),
        section: v.optional(v.string()),
      })
    ),
    entity: v.string(),
    entityId: v.union(
      v.id("modules"),
      v.id("lecturers"),
      v.id("module_iterations"),
      v.string()
    ),
    formatted: v.string(),
    modifiedBy: v.array(
      v.object({ email: v.string(), name: v.string() })
    ),
    permission: v.string(),
    timestamp: v.string(),
    type: v.optional(v.string()),
  }),
  system_metrics: defineTable({
    activeUsers: v.float64(),
    apiRequests: v.float64(),
    cpuUsage: v.float64(),
    databaseQueries: v.float64(),
    errorRate: v.float64(),
    memoryUsage: v.float64(),
    responseTime: v.float64(),
    timestamp: v.float64(),
    totalUsers: v.float64(),
  }),
  user_profiles: defineTable({
    createdAt: v.float64(),
    email: v.string(),
    firstName: v.string(),
    isActive: v.boolean(),
    lastName: v.string(),
    updatedAt: v.float64(),
    userId: v.string(),
  }),
  user_settings: defineTable({
    createdAt: v.float64(),
    dashboard: v.object({
      defaultView: v.string(),
      showNotifications: v.boolean(),
      showRecentActivity: v.boolean(),
    }),
    dateFormat: v.string(),
    language: v.string(),
    notifications: v.object({
      email: v.boolean(),
      inApp: v.boolean(),
      push: v.boolean(),
    }),
    theme: v.string(),
    timeFormat: v.string(),
    timezone: v.string(),
    updatedAt: v.float64(),
    userId: v.string(),
  }),
  users: defineTable({
    email: v.string(),
    familyName: v.string(),
    givenName: v.string(),
    jobTitle: v.string(),
    name: v.string(),
    pictureUrl: v.string(),
    preferences: v.object({
      interests: v.array(v.any()),
      sessionCampus: v.string(),
      sessionDay: v.string(),
      sessionTime: v.string(),
    }),
    settings: v.object({
      language: v.string(),
      notifyEmail: v.boolean(),
      notifyPush: v.boolean(),
      profilePublic: v.boolean(),
      theme: v.string(),
      timezone: v.string(),
    }),
    specialism: v.string(),
    subject: v.string(),
    systemRole: v.string(),
    team: v.string(),
    tokenIdentifier: v.string(),
    updatedAt: v.string(),
    username: v.string(),
  }),
});